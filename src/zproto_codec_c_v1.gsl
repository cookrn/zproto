.template 0
#
#   Generates a codec for a protocol specification (v1).
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

include "zproto_lib.gsl"
include "zproto_bnf.gsl"
resolve_includes ()
expand_headers ()
generate_bnf ()
set_defaults ()
.endtemplate
.if switches.zproject ?= 1 & switches.private ?<> 1
.   file.delete ("$(class.package_dir)/$(class.name).h")
.   directory.create ("../api")
.   output "../api/$(class.name).api"
<class name="$(class.name)" state="draft" >
<!--
    $(class.name) - $(class.title:)

    Codec header for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: $(filename), or
     * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
-->

    <constructor>
        Create a new $(class.name)
        <argument name = "id" type = "number" size = "4" />
    </constructor>

    <constructor name = "new_zpl">
        Create a new $(class.name) from zpl/zconfig_t *
        <argument name = "config" type = "zconfig" />
    </constructor>

    <destructor>
        Destroy the $(class.name)
    </destructor>

    <method name = "is" singleton = "1">
        Parse a zmsg_t and decides whether it is $(class.name). Returns
        true if it is, false otherwise. Doesn't destroy or modify the
        original message.
        <argument name = "msg" type = "zmsg" />
        <return type = "boolean" />
    </method>

    <method name = "decode" singleton = "1">
        Parse a $(class.name) from zmsg_t. Returns a new object, or NULL if
        the message could not be parsed, or was NULL. Destroys msg and
        nullifies the msg reference.
        <argument name = "msg_p" type = "zmsg" by_reference = "1" />
        <return type = "$(class.name)" fresh = "1" />
    </method>

    <method name = "encode" singleton = "1">
        Encode $(class.name) into zmsg and destroy it. Returns a newly created
        object or NULL if error. Use when not in control of sending the message.
        <argument name = "self_p" type = "$(class.name)" by_reference = "1" />
        <return type = "zmsg" fresh = "1" />
    </method>

    <method name = "recv" singleton = "1">
        Receive and parse a $(class.name) from the socket. Returns new object,
        or NULL if error. Will block if there's no message waiting.
        <argument name = "input" type = "anything" />
        <return type = "$(class.name)" fresh = "1" />
    </method>

    <method name = "recv_nowait" singleton = "1">
        Receive and parse a $(class.name) from the socket. Returns new object,
        or NULL either if there was no input waiting, or the recv was interrupted.
        <argument name = "input" type = "anything" />
        <return type = "$(class.name)" fresh = "1" />
    </method>

    <method name = "send" singleton = "1">
        Send the $(class.name) to the output, and destroy it
        <argument name = "self_p" type = "$(class.name)" by_reference = "1" />
        <argument name = "output" type = "anything" />
        <return type = "integer" />
    </method>

    <method name = "send_again" singleton = "1">
        Send the $(class.name) to the output, and do not destroy it
        <argument name = "self" type = "$(class.name)" />
        <argument name = "output" type = "anything" />
        <return type = "integer" />
    </method>

.for message
    <method name = "encode_$(name)" singleton = "1">
        Encode the $(message.NAME)
.for field where !defined (value)
.   if type = "number"
        <argument name = "$(name)" type = "number" size = "$(size)" />
.   elsif type = "octets"
        <argument name = "$(name)" type = "buffer" />
.   elsif type = "string" | type = "longstr"
        <argument name = "$(name)" type = "string" />
.   elsif type = "strings"
        <argument name = "$(name)" type = "zlist" />
.   elsif type = "hash" | type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
        <argument name = "$(name)" type = "z$(type)" />
.   endif
.endfor
        <return type = "zmsg" fresh = "1" />
    </method>

.endfor

.for message
    <method name = "send_$(name)" singleton = "1">
        Send the $(message.NAME) to the output in one step
        WARNING, this call will fail if output is of type ZMQ_ROUTER.

        <argument name = "output" type = "anything" />
.for field where !defined (value)
.   if type = "number"
        <argument name = "$(name)" type = "number" size = "$(size)" />
.   elsif type = "octets"
        <argument name = "$(name)" type = "buffer" />
.   elsif type = "string" | type = "longstr"
        <argument name = "$(name)" type = "string" />
.   elsif type = "strings"
        <argument name = "$(name)" type = "zlist" />
.   elsif type = "hash" | type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
        <argument name = "$(name)" type = "z$(type)" />
.   endif
.endfor
        <return type = "integer" />
    </method>

.endfor
    <method name = "dup">
        Duplicate the $(class.name) message
        <return type = "$(class.name)" fresh = "1" />
    </method>

    <method name = "print">
        Print contents of message to stdout
    </method>

    <method name = "zpl">
        Export class as zconfig_t*. Caller is responsibe for destroying the instance
        <argument name = "parent" type = "zconfig" />
        <return type = "zconfig" fresh = "1" />
    </method>

    <method name = "routing_id">
        Get the message routing id
        <return type = "zframe" fresh = "1" />
    </method>

    <method name = "set_routing_id">
        Set the message routing id
        <argument name = "routing_id" type = "zframe" />
    </method>

    <method name = "id">
        Get the $(class.name) id
        <return type = "integer" />
    </method>

    <method name = "set_id">
        Set the $(class.name) id
        <argument name = "id" type = "integer" />
    </method>

    <method name = "command">
        Return the printable command
        <return type = "string" />
    </method>


.for class.field where !defined (value)
.   if type = "number"
    <method name = "$(name)">
        Get/set the $(name) field
        <return type = "number" size = "$(size)" />
    </method>
    <method name = "set_$(name)">
        Get/set the $(name) field
        <argument name = "$(name)" type = "number" size = "$(size)" />
    </method>
.   elsif type = "octets"
    <method name = "$(name)">
        Get/set the $(name) field
        <return type = "buffer" />
    </method>
    <method name = "set_$(name)">
        Get/set the $(name) field
        <argument name = "$(name)" type = "buffer"/>
    </method>
.   elsif type = "string" | type = "longstr"
    <method name = "$(name)">
        Get/set the $(name) field
        <return type = "string" />
    </method>
    <method name = "set_$(name)">
        Get/set the $(name) field
        <argument name = "format" type = "format"/>
    </method>
.   elsif type = "strings"
    <method name = "$(name)">
        Get/set the $(name) field
        <return type = "zlist" />
    </method>
    <method name = "get_$(name)">
        Get/set the $(name) field and transfer ownership to caller
        <return type = "zlist" fresh = "1"/>
    </method>
    <method name = "set_$(name)">
        Get/set the $(name) field, transferring ownership from caller
        <argument name = "$(name)_p" type = "zlist" by_reference = "1"/>
    </method>
    <method name = "$(name)_first" >
        Iterate through the $(name) field, and append a $(name) value
        <return type = "string" />
    </method>
    <method name = "$(name)_next" >
        Iterate through the $(name) field, and append a $(name) value
        <return type = "string" />
    </method>
    <method name = "$(name)_append" >
        Iterate through the $(name) field, and append a $(name) value
        <argument name = "format" type = "format" />
    </method>
    <method name = "$(name)_size" >
        Iterate through the $(name) field, and append a $(name) value
        <return type = "size" />
    </method>
.   elsif type = "hash"
    <method name = "$(name)">
        Get/set the $(name) field
        <return type = "zhash" />
    </method>
    <method name = "get_$(name)">
        Get/set the $(name) field and transfer ownership to caller
        <return type = "zhash" fresh = "1"/>
    </method>
    <method name = "set_$(name)">
        Get/set the $(name) field, transferring ownership from caller
        <argument name = "$(name)_p" type = "zhash" by_reference = "1"/>
    </method>

    <method name = "$(name)_string">
        Get/set a value in the $(name) dictionary
        <argument name = "key" type = "string" />
        <argument name = "default_value" type = "string" />
        <return type = "string" />
    </method>

    <method name = "$(name)_number">
        Get/set a value in the $(name) dictionary
        <argument name = "key" type = "string" />
        <argument name = "default_value" type = "number" size = "8" />
        <return type = "number" size = "8" />
    </method>

    <method name = "$(name)_insert" >
        Get/set a value in the $(name) dictionary
        <argument name = "key" type = "string" />
        <argument name = "format" type = "format" />
    </method>
    <method name = "$(name)_size" >
        Get/set a value in the $(name) dictionary
        <return type = "size" />
    </method>
.   elsif type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
    <method name = "$(name)">
        Get a copy of the $(name) field
        <return type = "z$(type)" fresh = "1" />
    </method>
    <method name = "get_$(name)">
        Get a copy of the $(name) field and transfer ownership to caller
        <return type = "z$(type)" fresh = "1" />
    </method>
    <method name = "set_$(name)">
        Set the $(name) field, transferring ownership from caller
        <argument name = "$(type)_p" type = "z$(type)" />
    </method>
.   else
.       echo "E: unknown type '$(type)' for field '$(name)'"
.   endif

.endfor
    <method name = "test" singleton = "1">
        Self test of this class
        <argument name = "verbose" type = "boolean" />
    </method>
</class>
.else
.   output "$(class.package_dir)/$(class.name).h"
/*  =========================================================================
    $(class.name) - $(class.title:)

    Codec header for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: $(filename), or
     * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef $(CLASS.NAME)_H_INCLUDED
#define $(CLASS.NAME)_H_INCLUDED

/*  These are the $(class.name) messages:
.for message

    $(NAME) - $(string.trim (.?''):left)
.   for field
.       if type = "number"
        $(name)             $(type) $(size)\
                                        $(field.?'':)
.       elsif type = "octets"
        $(name)             $(type) [$(size)]\
                                        $(field.?'':)
.       else
        $(name)             $(type)     $(field.?'':)
.       endif
.   endfor
.endfor
*/

.for define
#define $(CLASS.NAME)_$(DEFINE.NAME:C)      $(value:)
.endfor

.for message
#define $(CLASS.NAME)_$(MESSAGE.NAME)       $(id)
.endfor
.for class.field where type = "octets"
#define $(CLASS.NAME)_$(FIELD.NAME)_SIZE    $(size)
.endfor

.if file.exists ("../include/czmq.h")
#include "czmq.h"
.else
#include <czmq.h>
.endif

.if defined (class.export_header)
#include "$(class.export_header)"
.endif

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
#ifndef $(CLASS.NAME)_T_DEFINED
typedef struct _$(class.name)_t $(class.name)_t;
#define $(CLASS.NAME)_T_DEFINED
#endif

//  @interface
//  Create a new $(class.name)
$(CLASS.EXPORT_MACRO)$(class.name)_t *
    $(class.name)_new (int id);

//  Create a new $(class.name) from zpl/zconfig_t *
$(CLASS.EXPORT_MACRO)$(class.name)_t *
    $(class.name)_new_zpl (zconfig_t *config);

//  Destroy the $(class.name)
$(CLASS.EXPORT_MACRO)void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Parse a zmsg_t and decides whether it is $(class.name). Returns
//  true if it is, false otherwise. Doesn't destroy or modify the
//  original message.
$(CLASS.EXPORT_MACRO)bool
    $(class.name)_is (zmsg_t *msg_p);

//  Parse a $(class.name) from zmsg_t. Returns a new object, or NULL if
//  the message could not be parsed, or was NULL. Destroys msg and
//  nullifies the msg reference.
$(CLASS.EXPORT_MACRO)$(class.name)_t *
    $(class.name)_decode (zmsg_t **msg_p);

//  Encode $(class.name) into zmsg and destroy it. Returns a newly created
//  object or NULL if error. Use when not in control of sending the message.
$(CLASS.EXPORT_MACRO)zmsg_t *
    $(class.name)_encode ($(class.name)_t **self_p);

//  Receive and parse a $(class.name) from the socket. Returns new object,
//  or NULL if error. Will block if there's no message waiting.
$(CLASS.EXPORT_MACRO)$(class.name)_t *
    $(class.name)_recv (void *input);

//  Receive and parse a $(class.name) from the socket. Returns new object,
//  or NULL either if there was no input waiting, or the recv was interrupted.
$(CLASS.EXPORT_MACRO)$(class.name)_t *
    $(class.name)_recv_nowait (void *input);

//  Send the $(class.name) to the output, and destroy it
$(CLASS.EXPORT_MACRO)int
    $(class.name)_send ($(class.name)_t **self_p, void *output);

//  Send the $(class.name) to the output, and do not destroy it
$(CLASS.EXPORT_MACRO)int
    $(class.name)_send_again ($(class.name)_t *self, void *output);

.for message
//  Encode the $(message.NAME)
$(CLASS.EXPORT_MACRO)zmsg_t *
    $(class.name)_encode_$(name) (
.for field where !defined (value)
.   if !first ()
,
.   endif
.   if type = "number"
        $(ctype) $(name)\
.   elsif type = "octets"
        byte *$(name)\
.   elsif type = "string" | type = "longstr"
        const char *$(name)\
.   elsif type = "strings"
        zlist_t *$(name)\
.   elsif type = "hash" | type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
        z$(type)_t *$(name)\
.   endif
.endfor
);

.endfor

.for message
//  Send the $(message.NAME) to the output in one step
//  WARNING, this call will fail if output is of type ZMQ_ROUTER.
$(CLASS.EXPORT_MACRO)int
    $(class.name)_send_$(name) (void *output\
.for field where !defined (value)
,
.   if type = "number"
        $(ctype) $(name)\
.   elsif type = "octets"
        byte *$(name)\
.   elsif type = "string" | type = "longstr"
        const char *$(name)\
.   elsif type = "strings"
        zlist_t *$(name)\
.   elsif type = "hash" | type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
        z$(type)_t *$(name)\
.   endif
.endfor
);

.endfor
//  Duplicate the $(class.name) message
$(CLASS.EXPORT_MACRO)$(class.name)_t *
    $(class.name)_dup ($(class.name)_t *self);

//  Print contents of message to stdout
$(CLASS.EXPORT_MACRO)void
    $(class.name)_print ($(class.name)_t *self);

//  Export class as zconfig_t*. Caller is responsibe for destroying the instance
$(CLASS.EXPORT_MACRO)zconfig_t *
    $(class.name)_zpl ($(class.name)_t *self, zconfig_t* parent);

//  Get/set the message routing id
$(CLASS.EXPORT_MACRO)zframe_t *
    $(class.name)_routing_id ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_routing_id ($(class.name)_t *self, zframe_t *routing_id);

//  Get the $(class.name) id and printable command
$(CLASS.EXPORT_MACRO)int
    $(class.name)_id ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_id ($(class.name)_t *self, int id);
$(CLASS.EXPORT_MACRO)const char *
    $(class.name)_command ($(class.name)_t *self);

.for class.field where !defined (value)
.   if type = "number"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)$(ctype)
    $(class.name)_$(name) ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, $(ctype) $(name));
.#
.   elsif type = "octets"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)byte *
    $(class.name)_$(name) ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, byte *$(name));
.#
.   elsif type = "string" | type = "longstr"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)const char *
    $(class.name)_$(name) ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, const char *format, ...);
.#
.   elsif type = "strings"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)zlist_t *
    $(class.name)_$(name) ($(class.name)_t *self);
//  Get the $(name) field and transfer ownership to caller
$(CLASS.EXPORT_MACRO)zlist_t *
    $(class.name)_get_$(name) ($(class.name)_t *self);
//  Set the $(name) field, transferring ownership from caller
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, zlist_t **$(name)_p);

//  Iterate through the $(name) field, and append a $(name) value
$(CLASS.EXPORT_MACRO)const char *
    $(class.name)_$(name)_first ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)const char *
    $(class.name)_$(name)_next ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_$(name)_append ($(class.name)_t *self, const char *format, ...);
$(CLASS.EXPORT_MACRO)size_t
    $(class.name)_$(name)_size ($(class.name)_t *self);
.#
.   elsif type = "hash"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)zhash_t *
    $(class.name)_$(name) ($(class.name)_t *self);
//  Get the $(name) field and transfer ownership to caller
$(CLASS.EXPORT_MACRO)zhash_t *
    $(class.name)_get_$(name) ($(class.name)_t *self);
//  Set the $(name) field, transferring ownership from caller
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, zhash_t **$(name)_p);

//  Get/set a value in the $(name) dictionary
$(CLASS.EXPORT_MACRO)const char *
    $(class.name)_$(name)_string ($(class.name)_t *self,
        const char *key, const char *default_value);
$(CLASS.EXPORT_MACRO)uint64_t
    $(class.name)_$(name)_number ($(class.name)_t *self,
        const char *key, uint64_t default_value);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_$(name)_insert ($(class.name)_t *self,
        const char *key, const char *format, ...);
$(CLASS.EXPORT_MACRO)size_t
    $(class.name)_$(name)_size ($(class.name)_t *self);
.#
.   elsif type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
//  Get a copy of the $(name) field
$(CLASS.EXPORT_MACRO)z$(type)_t *
    $(class.name)_$(name) ($(class.name)_t *self);
//  Get the $(name) field and transfer ownership to caller
$(CLASS.EXPORT_MACRO)z$(type)_t *
    $(class.name)_get_$(name) ($(class.name)_t *self);
//  Set the $(name) field, transferring ownership from caller
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, z$(type)_t **$(type)_p);
.#
.   else
.       echo "E: unknown type '$(type)' for field '$(name)'"
.   endif

.endfor
//  Self test of this class
$(CLASS.EXPORT_MACRO)void
    $(class.name)_test (bool verbose);
//  @end

//  For backwards compatibility with old codecs
#define $(class.name)_dump  $(class.name)_print
#define is_$(class.name) $(class.name)_is

#ifdef __cplusplus
}
#endif

#endif
.endif
.output "$(class.source_dir)/$(class.name).c"
/*  =========================================================================
    $(class.name) - $(class.title:)

    Codec class for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: $(filename), or
     * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    $(class.name) - $(class.title:)
@discuss
@end
*/

.if defined (class.project_header)
#include "$(class.project_header)"
.endif
#include "$(class.package_dir)/$(class.name).h"

//  Structure of our class

struct _$(class.name)_t {
    zframe_t *routing_id;               //  Routing_id from ROUTER, if any
    int id;                             //  $(class.name) message ID
    byte *needle;                       //  Read/write pointer for serialization
    byte *ceiling;                      //  Valid upper limit for read pointer
.for class.field
.   if type = "number"
    $(ctype) $(name);                   //  $(string.trim (field.)?name:left,block)
.   elsif type = "octets"
    byte $(name) [$(size)];             //  $(string.trim (field.)?name:left,block)
.   elsif type = "string" | type = "longstr"
    char *$(name);                      //  $(string.trim (field.)?name:left,block)
.   elsif type = "strings"
    zlist_t *$(name);                   //  $(string.trim (field.)?name:left,block)
.   elsif type = "hash"
    zhash_t *$(name);                   //  $(string.trim (field.)?name:left,block)
    size_t $(name)_bytes;               //  $(string.trim (field.)?name:left,block)
.   elsif type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
    z$(type)_t *$(name);                //  $(string.trim (field.)?name:left,block)
.   endif
.endfor
};

//  --------------------------------------------------------------------------
//  Network data encoding macros

//  Put a block of octets to the frame
#define PUT_OCTETS(host,size) { \\
    memcpy (self->needle, (host), size); \\
    self->needle += size; \\
}

//  Get a block of octets from the frame
#define GET_OCTETS(host,size) { \\
    if (self->needle + size > self->ceiling) \\
        goto malformed; \\
    memcpy ((host), self->needle, size); \\
    self->needle += size; \\
}

//  Put a 1-byte number to the frame
#define PUT_NUMBER1(host) { \\
    *(byte *) self->needle = (byte) (host); \\
    self->needle++; \\
}

//  Put a 2-byte number to the frame
#define PUT_NUMBER2(host) { \\
    self->needle [0] = (byte) (((host) >> 8)  & 255); \\
    self->needle [1] = (byte) (((host))       & 255); \\
    self->needle += 2; \\
}

//  Put a 4-byte number to the frame
#define PUT_NUMBER4(host) { \\
    self->needle [0] = (byte) (((host) >> 24) & 255); \\
    self->needle [1] = (byte) (((host) >> 16) & 255); \\
    self->needle [2] = (byte) (((host) >> 8)  & 255); \\
    self->needle [3] = (byte) (((host))       & 255); \\
    self->needle += 4; \\
}

//  Put a 8-byte number to the frame
#define PUT_NUMBER8(host) { \\
    self->needle [0] = (byte) (((host) >> 56) & 255); \\
    self->needle [1] = (byte) (((host) >> 48) & 255); \\
    self->needle [2] = (byte) (((host) >> 40) & 255); \\
    self->needle [3] = (byte) (((host) >> 32) & 255); \\
    self->needle [4] = (byte) (((host) >> 24) & 255); \\
    self->needle [5] = (byte) (((host) >> 16) & 255); \\
    self->needle [6] = (byte) (((host) >> 8)  & 255); \\
    self->needle [7] = (byte) (((host))       & 255); \\
    self->needle += 8; \\
}

//  Get a 1-byte number from the frame
#define GET_NUMBER1(host) { \\
    if (self->needle + 1 > self->ceiling) \\
        goto malformed; \\
    (host) = *(byte *) self->needle; \\
    self->needle++; \\
}

//  Get a 2-byte number from the frame
#define GET_NUMBER2(host) { \\
    if (self->needle + 2 > self->ceiling) \\
        goto malformed; \\
    (host) = ((uint16_t) (self->needle [0]) << 8) \\
           +  (uint16_t) (self->needle [1]); \\
    self->needle += 2; \\
}

//  Get a 4-byte number from the frame
#define GET_NUMBER4(host) { \\
    if (self->needle + 4 > self->ceiling) \\
        goto malformed; \\
    (host) = ((uint32_t) (self->needle [0]) << 24) \\
           + ((uint32_t) (self->needle [1]) << 16) \\
           + ((uint32_t) (self->needle [2]) << 8) \\
           +  (uint32_t) (self->needle [3]); \\
    self->needle += 4; \\
}

//  Get a 8-byte number from the frame
#define GET_NUMBER8(host) { \\
    if (self->needle + 8 > self->ceiling) \\
        goto malformed; \\
    (host) = ((uint64_t) (self->needle [0]) << 56) \\
           + ((uint64_t) (self->needle [1]) << 48) \\
           + ((uint64_t) (self->needle [2]) << 40) \\
           + ((uint64_t) (self->needle [3]) << 32) \\
           + ((uint64_t) (self->needle [4]) << 24) \\
           + ((uint64_t) (self->needle [5]) << 16) \\
           + ((uint64_t) (self->needle [6]) << 8) \\
           +  (uint64_t) (self->needle [7]); \\
    self->needle += 8; \\
}

//  Put a string to the frame
#define PUT_STRING(host) { \\
    size_t string_size = strlen (host); \\
    PUT_NUMBER1 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
}

//  Get a string from the frame
#define GET_STRING(host) { \\
    size_t string_size; \\
    GET_NUMBER1 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) \\
        goto malformed; \\
    (host) = (char *) malloc (string_size + 1); \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
}

//  Put a long string to the frame
#define PUT_LONGSTR(host) { \\
    size_t string_size = strlen (host); \\
    PUT_NUMBER4 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
}

//  Get a long string from the frame
#define GET_LONGSTR(host) { \\
    size_t string_size; \\
    GET_NUMBER4 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) \\
        goto malformed; \\
    (host) = (char *) malloc (string_size + 1); \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
}

//  --------------------------------------------------------------------------
//  bytes cstring conversion macros

// create new array of unsigned char from properly encoded string
// len of resulting array is strlen (str) / 2
// caller is responsibe for freeing up the memory
#define BYTES_FROM_STR(dst, _str) { \\
    char *str = (char*) (_str); \\
    if (!str || (strlen (str) % 2) != 0) \\
        return NULL; \\
\\
    size_t strlen_2 = strlen (str) / 2; \\
    byte *mem = (byte*) zmalloc (strlen_2); \\
\\
    for (size_t i = 0; i != strlen_2; i++) \\
    { \\
        char buff[3] = {0x0, 0x0, 0x0}; \\
        strncpy (buff, str, 2); \\
        unsigned int uint; \\
        sscanf (buff, "%x", &uint); \\
        assert (uint <= 0xff); \\
        mem [i] = (byte) (0xff & uint); \\
        str += 2; \\
    } \\
    dst = mem; \\
}

// convert len bytes to hex string
// caller is responsibe for freeing up the memory
#define STR_FROM_BYTES(dst, _mem, _len) { \\
    byte *mem = (byte*) (_mem); \\
    size_t len = (size_t) (_len); \\
    char* ret = (char*) zmalloc (2*len + 1); \\
    char* aux = ret; \\
    for (size_t i = 0; i != len; i++) \\
    { \\
        sprintf (aux, "%02x", mem [i]); \\
        aux+=2; \\
    } \\
    dst = ret; \\
}



//  --------------------------------------------------------------------------
//  Create a new $(class.name)

$(class.name)_t *
$(class.name)_new (int id)
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    self->id = id;
    return self;
}

//  --------------------------------------------------------------------------
//  Create a new $(class.name) from zpl/zconfig_t *

$(class.name)_t *
    $(class.name)_new_zpl (zconfig_t *config)
{
    assert (config);
    $(class.name)_t *self = NULL;
    char *message = zconfig_get (config, "message", NULL);
    if (!message) {
        zsys_error ("Can't find 'message' section");
        return NULL;
    }

.for class.message
    if (streq ("$(CLASS.NAME)_$(MESSAGE.NAME)", message))
        self = $(class.name)_new ($(CLASS.NAME)_$(MESSAGE.NAME));
    else
.endfor
       {
        zsys_error ("message=%s is not known", message);
        return NULL;
       }

    char *s = zconfig_get (config, "routing_id", NULL);
    if (s) {
        byte *bvalue;
        BYTES_FROM_STR (bvalue, s);
        if (!bvalue) {
            $(class.name)_destroy (&self);
            return NULL;
        }
        zframe_t *frame = zframe_new (bvalue, strlen (s) / 2);
        free (bvalue);
        self->routing_id = frame;
    }

    zconfig_t *content = zconfig_locate (config, "content");
    if (!content) {
        zsys_error ("Can't find 'content' section");
        return NULL;
    }
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field where !defined (value)
.       if type = "number"
            {
            char *es = NULL;
            char *s = zconfig_get (content, "$(name)", NULL);
            if (!s) {
                zsys_error ("content/$(name) not found");
                $(class.name)_destroy (&self);
                return NULL;
            }
            uint64_t uvalue = (uint64_t) strtoll (s, &es, 10);
            if (es != s+strlen (s)) {
                zsys_error ("content/$(name): %s is not a number", s);
                $(class.name)_destroy (&self);
                return NULL;
            }
            self->$(name) = uvalue;
            }
.       elsif type = "octets"
            {
            char *s = zconfig_get (content, "$(name)", NULL);
            if (!s) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            byte *bvalue;
            BYTES_FROM_STR (bvalue, s);
            if (!bvalue) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            self->$(name) = bvalue;
            }
.       elsif type = "string" | type = "longstr"
            {
            char *s = zconfig_get (content, "$(name)", NULL);
            if (!s) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            self->$(name) = strdup (s);
            }
.       elsif type = "strings"
            {
            zconfig_t *zstrings = zconfig_locate (content, "$(name)");
            if (zstrings) {
                zlist_t *strings = zlist_new ();
                zlist_autofree (strings);
                for (zconfig_t *child = zconfig_child (zstrings);
                                child != NULL;
                                child = zconfig_next (child))
                {
                    zlist_append (strings, zconfig_value (child));
                }
                self->$(name) = strings;
            }
            }
.       elsif type = "hash"
            {
            zconfig_t *zhash = zconfig_locate (content, "$(name)");
            if (zhash) {
                zhash_t *hash = zhash_new ();
                zhash_autofree (hash);
                for (zconfig_t *child = zconfig_child (zhash);
                                child != NULL;
                                child = zconfig_next (child))
                {
                    zhash_update (hash, zconfig_name (child), zconfig_value (child));
                }
                self->$(name) = hash;
            }
            }
.       elsif type = "chunk"
            {
            char *s = zconfig_get (content, "$(name)", NULL);
            if (!s) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            byte *bvalue;
            BYTES_FROM_STR (bvalue, s);
            if (!bvalue) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            zchunk_t *chunk = zchunk_new (bvalue, strlen (s) / 2);
            free (bvalue);
            self->$(name) = chunk;
.       elsif type = "uuid"
            {
            char *s = zconfig_get (content, "$(name)", NULL);
            if (s) {
                zuuid_t *uuid = zuuid_new ();
                zuuid_set_str (uuid, s);
                self->$(name) = uuid;
            }
            }
.       elsif type = "frame"
            {
            char *s = zconfig_get (content, "$(name)", NULL);
            if (!s) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            byte *bvalue;
            BYTES_FROM_STR (bvalue, s);
            if (!bvalue) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            zframe_t *frame = zframe_new (bvalue, strlen (s) / 2);
            free (bvalue);
            self->$(name) = frame;
            }
.       elsif type = "msg"
            {
            char *s = zconfig_get (content, "$(name)", NULL);
            if (!s) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            byte *bvalue;
            BYTES_FROM_STR (bvalue, s);
            if (!bvalue) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            zmsg_t *msg = zmsg_decode (bvalue, strlen (s) / 2);
            free (bvalue);
            self->$(name) = msg;
            }
.       endif
.   endfor
            break;
.endfor
    }
    return self;
}

//  --------------------------------------------------------------------------
//  Destroy the $(class.name)

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;

        //  Free class properties
        zframe_destroy (&self->routing_id);
.for class.field
.   if type = "string" | type = "longstr"
        free (self->$(name));
.   elsif type = "strings"
        if (self->$(name))
            zlist_destroy (&self->$(name));
.   elsif type = "hash" | type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
        z$(type)_destroy (&self->$(name));
.   endif
.endfor

        //  Free object itself
        free (self);
        *self_p = NULL;
    }
}

//  Parse a zmsg_t and decides whether it is $(class.name). Returns
//  true if it is, false otherwise. Doesn't destroy or modify the
//  original message.
bool
$(class.name)_is (zmsg_t *msg)
{
    if (msg == NULL)
        return false;

    zframe_t *frame = zmsg_first (msg);
    if (frame == NULL)
        return false;

    //  Get and check protocol signature
    $(class.name)_t *self = $(class.name)_new (0);
    self->needle = zframe_data (frame);
    self->ceiling = self->needle + zframe_size (frame);
    uint16_t signature;
    GET_NUMBER2 (signature);
    if (signature != (0xAAA0 | $(class.signature)))
        goto fail;             //  Invalid signature

    //  Get message id and parse per message type
    GET_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.endfor
            $(class.name)_destroy (&self);
            return true;
        default:
            goto fail;
    }
    fail:
    malformed:
        $(class.name)_destroy (&self);
        return false;
}

//  --------------------------------------------------------------------------
//  Parse a $(class.name) from zmsg_t. Returns a new object, or NULL if
//  the message could not be parsed, or was NULL. Destroys msg and
//  nullifies the msg reference.

$(class.name)_t *
$(class.name)_decode (zmsg_t **msg_p)
{
    assert (msg_p);
    zmsg_t *msg = *msg_p;
    if (msg == NULL)
        return NULL;

    $(class.name)_t *self = $(class.name)_new (0);
    //  Read and parse command in frame
    zframe_t *frame = zmsg_pop (msg);
    if (!frame)
        goto empty;             //  Malformed or empty

    //  Get and check protocol signature
    self->needle = zframe_data (frame);
    self->ceiling = self->needle + zframe_size (frame);
    uint16_t signature;
    GET_NUMBER2 (signature);
    if (signature != (0xAAA0 | $(class.signature)))
        goto empty;             //  Invalid signature

    //  Get message id and parse per message type
    GET_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            GET_NUMBER$(size) (self->$(name));
.           if defined (field.value)
            if (self->$(name) != $(field.value:))
                goto malformed;
.           endif
.       elsif type = "octets"
            GET_OCTETS (self->$(name), $(size));
.       elsif type = "string"
            GET_STRING (self->$(name));
.           if defined (field.value)
            if (strneq (self->$(name), "$(field.value:)"))
                goto malformed;
.           endif
.       elsif type = "longstr"
            GET_LONGSTR (self->$(name));
.       elsif type = "strings"
            {
                size_t list_size;
                GET_NUMBER4 (list_size);
                self->$(name) = zlist_new ();
                zlist_autofree (self->$(name));
                while (list_size--) {
                    char *string;
                    GET_LONGSTR (string);
                    zlist_append (self->$(name), string);
                    free (string);
                }
            }
.       elsif type = "hash"
            {
                size_t hash_size;
                GET_NUMBER4 (hash_size);
                self->$(name) = zhash_new ();
                zhash_autofree (self->$(name));
                while (hash_size--) {
                    char *key, *value;
                    GET_STRING (key);
                    GET_LONGSTR (value);
                    zhash_insert (self->$(name), key, value);
                    free (key);
                    free (value);
                }
            }
.       elsif type = "chunk"
            {
                size_t chunk_size;
                GET_NUMBER4 (chunk_size);
                if (self->needle + chunk_size > (self->ceiling))
                    goto malformed;
                self->$(name) = zchunk_new (self->needle, chunk_size);
                self->needle += chunk_size;
            }
.       elsif type = "uuid"
            {
                if (self->needle + ZUUID_LEN > (self->ceiling))
                    goto malformed;
                self->$(name) = zuuid_new ();
                zuuid_set (self->$(name), self->needle);
                self->needle += ZUUID_LEN;
            }
.       elsif type = "frame"
            {
                //  Get next frame, leave current untouched
                zframe_t *$(name) = zmsg_pop (msg);
                if (!$(name))
                    goto malformed;
                self->$(name) = $(name);
            }
.       elsif type = "msg"
            //  Get zero or more remaining frames, leaving current
            //  frame untouched
            self->$(name) = zmsg_new ();
            while (zmsg_size (msg))
                zmsg_add (self->$(name), zmsg_pop (msg));
.       endif
.   endfor
            break;

.endfor
        default:
            goto malformed;
    }
    //  Successful return
    zframe_destroy (&frame);
    zmsg_destroy (msg_p);
    return self;

    //  Error returns
    malformed:
        zsys_error ("malformed message '%d'\\n", self->id);
    empty:
        zframe_destroy (&frame);
        zmsg_destroy (msg_p);
        $(class.name)_destroy (&self);
        return (NULL);
}


//  --------------------------------------------------------------------------
//  Encode $(class.name) into zmsg and destroy it. Returns a newly created
//  object or NULL if error. Use when not in control of sending the message.

zmsg_t *
$(class.name)_encode ($(class.name)_t **self_p)
{
    assert (self_p);
    assert (*self_p);

    $(class.name)_t *self = *self_p;
    zmsg_t *msg = zmsg_new ();

    size_t frame_size = 2 + 1;          //  Signature and message ID
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            //  $(name) is a $(size)-byte integer
            frame_size += $(size);
.       elsif type = "octets"
            //  $(name) is a block of $(size) bytes
            frame_size += $(size);
.       elsif type = "string"
            //  $(name) is a string with 1-byte length
.           if defined (field.value)
            frame_size += 1 + strlen ("$(field.value:)");
.           else
            frame_size++;       //  Size is one octet
            if (self->$(name))
                frame_size += strlen (self->$(name));
.           endif
.       elsif type = "longstr"
            //  $(name) is a string with 4-byte length
            frame_size += 4;
            if (self->$(name))
                frame_size += strlen (self->$(name));
.       elsif type = "strings"
            //  $(name) is an array of strings
            frame_size += 4;    //  Size is 4 octets
            if (self->$(name)) {
                //  Add up size of list contents
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    frame_size += 4 + strlen ($(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
.       elsif type = "hash"
            //  $(name) is an array of key=value strings
            frame_size += 4;    //  Size is 4 octets
            if (self->$(name)) {
                self->$(name)_bytes = 0;
                //  Add up size of dictionary contents
                char *item = (char *) zhash_first (self->$(name));
                while (item) {
                    self->$(name)_bytes += 1 + strlen ((const char *) zhash_cursor (self->$(name)));
                    self->$(name)_bytes += 4 + strlen (item);
                    item = (char *) zhash_next (self->$(name));
                }
            }
            frame_size += self->$(name)_bytes;
.       elsif type = "chunk"
            //  $(name) is a chunk with 4-byte length
            frame_size += 4;
            if (self->$(name))
                frame_size += zchunk_size (self->$(name));
.       elsif type = "uuid"
            //  $(name) is uuid with 16-byte length
            frame_size += ZUUID_LEN;
.       endif
.   endfor
            break;

.endfor
        default:
            zsys_error ("bad message type '%d', not sent\\n", self->id);
            //  No recovery, this is a fatal application error
            assert (false);
    }
    //  Now serialize message into the frame
    zframe_t *frame = zframe_new (NULL, frame_size);
    self->needle = zframe_data (frame);
    PUT_NUMBER2 (0xAAA0 | $(class.signature));
    PUT_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
.           if defined (field.value)
            PUT_NUMBER$(size) ($(field.value:));
.           else
            PUT_NUMBER$(size) (self->$(name));
.           endif
.       elsif type = "octets"
            PUT_OCTETS (self->$(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            PUT_STRING ("$(field.value:)");
.           else
            if (self->$(name)) {
                PUT_STRING (self->$(name));
            }
            else
                PUT_NUMBER1 (0);    //  Empty string
.           endif
.       elsif type = "longstr"
            if (self->$(name)) {
                PUT_LONGSTR (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty string
.       elsif type = "strings"
            if (self->$(name)) {
                PUT_NUMBER4 (zlist_size (self->$(name)));
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    PUT_LONGSTR ($(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
            else
                PUT_NUMBER4 (0);    //  Empty string array
.       elsif type = "hash"
            if (self->$(name)) {
                PUT_NUMBER4 (zhash_size (self->$(name)));
                char *item = (char *) zhash_first (self->$(name));
                while (item) {
                    PUT_STRING ((const char *) zhash_cursor ((zhash_t *) self->$(name)));
                    PUT_LONGSTR (item);
                    item = (char *) zhash_next (self->$(name));
                }
            }
            else
                PUT_NUMBER4 (0);    //  Empty dictionary
.       elsif type = "chunk"
            if (self->$(name)) {
                PUT_NUMBER4 (zchunk_size (self->$(name)));
                memcpy (self->needle,
                        zchunk_data (self->$(name)),
                        zchunk_size (self->$(name)));
                self->needle += zchunk_size (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty chunk
.       elsif type = "uuid"
            if (self->$(name))
                zuuid_export (self->$(name), self->needle);
            else
                memset (self->needle, 0, ZUUID_LEN);
            self->needle += ZUUID_LEN;
.       endif
.   endfor
            break;

.endfor
    }
    //  Now send the data frame
    if (zmsg_append (msg, &frame)) {
        zmsg_destroy (&msg);
        $(class.name)_destroy (self_p);
        return NULL;
    }
.for class.message where count (field, type = "frame")
    //  Now send any frame fields, in order
    if (self->id == $(CLASS.NAME)_$(MESSAGE.NAME)) {
.   for field where type = "frame"
        //  If $(name) isn't set, send an empty frame
        if (!self->$(field.name))
            self->$(field.name) = zframe_new (NULL, 0);
        if (zmsg_append (msg, &self->$(field.name))) {
            zmsg_destroy (&msg);
            $(class.name)_destroy (self_p);
            return NULL;
        }
.   endfor
    }
.endfor
.for class.message where count (field, type = "msg")
    //  Now send the message field if there is any
    if (self->id == $(CLASS.NAME)_$(MESSAGE.NAME)) {
.   for field where type = "msg"
.       if item () <> count (message.field)
.           echo "E: in $(message.name:), $(field.name) must come last"
.       endif
        if (self->$(field.name)) {
            zframe_t *frame = zmsg_pop (self->$(field.name));
            while (frame) {
                zmsg_append (msg, &frame);
                frame = zmsg_pop (self->$(field.name));
            }
        }
        else {
            zframe_t *frame = zframe_new (NULL, 0);
            zmsg_append (msg, &frame);
        }
.   endfor
    }
.endfor
    //  Destroy $(class.name) object
    $(class.name)_destroy (self_p);
    return msg;
}


//  --------------------------------------------------------------------------
//  Receive and parse a $(class.name) from the socket. Returns new object or
//  NULL if error. Will block if there's no message waiting.

$(class.name)_t *
$(class.name)_recv (void *input)
{
    assert (input);
    zmsg_t *msg = zmsg_recv (input);
    if (!msg)
        return NULL;            //  Interrupted
.if switches.trace ?= 1
    zmsg_print (msg);
.endif

    //  If message came from a router socket, first frame is routing_id
    zframe_t *routing_id = NULL;
    if (zsock_type (zsock_resolve (input)) == ZMQ_ROUTER) {
        routing_id = zmsg_pop (msg);
        //  If message was not valid, forget about it
        if (!routing_id || !zmsg_next (msg))
            return NULL;        //  Malformed or empty
    }
    $(class.name)_t *$(class.name) = $(class.name)_decode (&msg);
    if ($(class.name) && zsock_type (zsock_resolve (input)) == ZMQ_ROUTER)
        $(class.name)->routing_id = routing_id;

    return $(class.name);
}


//  --------------------------------------------------------------------------
//  Receive and parse a $(class.name) from the socket. Returns new object,
//  or NULL either if there was no input waiting, or the recv was interrupted.

$(class.name)_t *
$(class.name)_recv_nowait (void *input)
{
    assert (input);
    zmsg_t *msg = zmsg_recv_nowait (input);
    if (!msg)
        return NULL;            //  Interrupted
.if switches.trace ?= 1
    zmsg_print (msg);
.endif
    //  If message came from a router socket, first frame is routing_id
    zframe_t *routing_id = NULL;
    if (zsock_type (zsock_resolve (input)) == ZMQ_ROUTER) {
        routing_id = zmsg_pop (msg);
        //  If message was not valid, forget about it
        if (!routing_id || !zmsg_next (msg))
            return NULL;        //  Malformed or empty
    }
    $(class.name)_t *$(class.name) = $(class.name)_decode (&msg);
    if ($(class.name) && zsock_type (zsock_resolve (input)) == ZMQ_ROUTER)
        $(class.name)->routing_id = routing_id;

    return $(class.name);
}


//  --------------------------------------------------------------------------
//  Send the $(class.name) to the socket, and destroy it
//  Returns 0 if OK, else -1

int
$(class.name)_send ($(class.name)_t **self_p, void *output)
{
    assert (self_p);
    assert (*self_p);
    assert (output);

    //  Save routing_id if any, as encode will destroy it
    $(class.name)_t *self = *self_p;
    zframe_t *routing_id = self->routing_id;
    self->routing_id = NULL;

    //  Encode $(class.name) message to a single zmsg
    zmsg_t *msg = $(class.name)_encode (self_p);

    //  If we're sending to a ROUTER, send the routing_id first
    if (zsock_type (zsock_resolve (output)) == ZMQ_ROUTER) {
        assert (routing_id);
        zmsg_prepend (msg, &routing_id);
    }
    else
        zframe_destroy (&routing_id);

    if (msg && zmsg_send (&msg, output) == 0)
        return 0;
    else
        return -1;              //  Failed to encode, or send
}


//  --------------------------------------------------------------------------
//  Send the $(class.name) to the output, and do not destroy it

int
$(class.name)_send_again ($(class.name)_t *self, void *output)
{
    assert (self);
    assert (output);
    self = $(class.name)_dup (self);
    return $(class.name)_send (&self, output);
}


.for message
//  --------------------------------------------------------------------------
//  Encode $(message.NAME) message

zmsg_t *
$(class.name)_encode_$(name) (
.for field where !defined (value)
.   if !first ()
,
.   endif
.   if type = "number"
    $(ctype) $(name)\
.   elsif type = "octets"
    byte *$(name)\
.   elsif type = "string" | type = "longstr"
    const char *$(name)\
.   elsif type = "strings"
    zlist_t *$(name)\
.   elsif type = "hash" | type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
    z$(type)_t *$(name)\
.   endif
.endfor
)
{
    $(class.name)_t *self = $(class.name)_new ($(class.NAME)_$(NAME));
.for field where !defined (value)
.   if type = "number" | type = "octets"
    $(class.name)_set_$(name) (self, $(name));
.   elsif type = "string" | type = "longstr"
    $(class.name)_set_$(name) (self, "%s", $(name));
.   elsif type = "strings"
    zlist_t *$(name)_copy = zlist_dup ($(name));
    $(class.name)_set_$(name) (self, &$(name)_copy);
.   elsif type = "hash"
    zhash_t *$(name)_copy = zhash_dup ($(name));
    $(class.name)_set_$(name) (self, &$(name)_copy);
.   elsif type = "chunk" | type = "uuid" | type = "frame" | type = "msg"
    z$(type)_t *$(name)_copy = z$(type)_dup ($(name));
    $(class.name)_set_$(name) (self, &$(name)_copy);
.   endif
.endfor
    return $(class.name)_encode (&self);
}


.endfor
.for message
//  --------------------------------------------------------------------------
//  Send the $(message.NAME) to the socket in one step

int
$(class.name)_send_$(name) (
    void *output\
.for field where !defined (value)
,
.   if type = "number"
    $(ctype) $(name)\
.   elsif type = "octets"
    byte *$(name)\
.   elsif type = "string" | type = "longstr"
    const char *$(name)\
.   elsif type = "strings"
    zlist_t *$(name)\
.   elsif type = "hash" | type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
    z$(type)_t *$(name)\
.   endif
.endfor
)
{
    $(class.name)_t *self = $(class.name)_new ($(class.NAME)_$(NAME));
.for field where !defined (value)
.   if type = "number" | type = "octets" | type = "longstr"
    $(class.name)_set_$(name) (self, $(name));
.   elsif type = "string"
    $(class.name)_set_$(name) (self, "%s", $(name));
.   elsif type = "strings"
    zlist_t *$(name)_copy = zlist_dup ($(name));
    $(class.name)_set_$(name) (self, &$(name)_copy);
.   elsif type = "hash"
    zhash_t *$(name)_copy = zhash_dup ($(name));
    $(class.name)_set_$(name) (self, &$(name)_copy);
.   elsif type = "chunk" | type = "uuid" | type = "frame" | type = "msg"
    z$(type)_t *$(name)_copy = z$(type)_dup ($(name));
    $(class.name)_set_$(name) (self, &$(name)_copy);
.   endif
.endfor
    return $(class.name)_send (&self, output);
}


.endfor
//  --------------------------------------------------------------------------
//  Duplicate the $(class.name) message

$(class.name)_t *
$(class.name)_dup ($(class.name)_t *self)
{
    if (!self)
        return NULL;

    $(class.name)_t *copy = $(class.name)_new (self->id);
    if (self->routing_id)
        copy->routing_id = zframe_dup (self->routing_id);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            copy->$(name) = self->$(name);
.       elsif type = "octets"
            memcpy (copy->$(name), self->$(name), $(size));
.       elsif type = "string" | type = "longstr"
            copy->$(name) = self->$(name)? strdup (self->$(name)): NULL;
.       elsif type = "strings"
            copy->$(name) = self->$(name)? zlist_dup (self->$(name)): NULL;
.       elsif type = "hash" | type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
            copy->$(name) = self->$(name)? z$(type)_dup (self->$(name)): NULL;
.       endif
.   endfor
            break;

.endfor
    }
    return copy;
}


//  --------------------------------------------------------------------------
//  Print contents of message to stdout

void
$(class.name)_print ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            zsys_debug ("$(CLASS.NAME)_$(MESSAGE.NAME):");
.   for field
.       if type = "number"
.           if defined (field.value)
            zsys_debug ("    $(name)=$(field.value)");
.           else
            zsys_debug ("    $(name)=%ld", (long) self->$(name));
.           endif
.       elsif type = "octets"
            zsys_debug ("    $(name)=[ ... ]");
.       elsif type = "string" | type = "longstr"
.           if defined (field.value)
            zsys_debug ("    $(name)=$(field.value)");
.           else
            if (self->$(name))
                zsys_debug ("    $(name)='%s'", self->$(name));
            else
                zsys_debug ("    $(name)=");
.           endif
.       elsif type = "strings"
            zsys_debug ("    $(name)=");
            if (self->$(name)) {
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    zsys_debug ("        '%s'", $(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
.       elsif type = "hash"
            zsys_debug ("    $(name)=");
            if (self->$(name)) {
                char *item = (char *) zhash_first (self->$(name));
                while (item) {
                    zsys_debug ("        %s=%s", zhash_cursor (self->$(name)), item);
                    item = (char *) zhash_next (self->$(name));
                }
            }
            else
                zsys_debug ("(NULL)");
.       elsif type = "chunk"
            zsys_debug ("    $(name)=[ ... ]");
.       elsif type = "uuid"
            zsys_debug ("    $(name)=");
            if (self->$(name))
                zsys_debug ("        %s", zuuid_str (self->$(name)));
            else
                zsys_debug ("        (NULL)");
.       elsif type = "frame"
            zsys_debug ("    $(name)=");
            if (self->$(name))
                zframe_print (self->$(name), NULL);
            else
                zsys_debug ("(NULL)");
.       elsif type = "msg"
            zsys_debug ("    $(name)=");
            if (self->$(name))
                zmsg_print (self->$(name));
            else
                zsys_debug ("(NULL)");
.       endif
.   endfor
            break;

.endfor
    }
}

//  --------------------------------------------------------------------------
//  Export class as zconfig_t*. Caller is responsibe for destroying the instance

zconfig_t *
$(class.name)_zpl ($(class.name)_t *self, zconfig_t *parent)
{
    assert (self);

    zconfig_t *root = zconfig_new ("$(class.name)", parent);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
        {
            zconfig_put (root, "message", "$(CLASS.NAME)_$(MESSAGE.NAME)");

            if (self->routing_id) {
                char *hex = NULL;
                STR_FROM_BYTES (hex, zframe_data (self->routing_id), zframe_size (self->routing_id));
                zconfig_putf (root, "routing_id", "%s", hex);
                zstr_free (&hex);
            }

            zconfig_t *config = zconfig_new ("content", root);
.   for field
.       if type = "number"
.           if defined (field.value)
            zconfig_putf (config, "$(name)", "%s", "$(field.value)");
.           else
            zconfig_putf (config, "$(name)", "%ld", (long) self->$(name));
.           endif
.       elsif type = "octets"
            {
            char *hex = NULL;
            STR_FROM_BYTES (hex, self->$(name), $(size));
            zconfig_putf (config, "$(name)", "%s", hex);
            zstr_free (&hex);
            }
.       elsif type = "string" | type = "longstr"
.           if defined (field.value)
            zconfig_putf (config, "$(name)", "%s", "$(field.value)");
.           else
            if (self->$(name))
                zconfig_putf (config, "$(name)", "%s", self->$(name));
.           endif
.       elsif type = "strings"
            if (self->$(name)) {
                zconfig_t *strings = zconfig_new ("$(name)", config);
                size_t i = 0;
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    char *key = zsys_sprintf ("%zu", i);
                    zconfig_putf (config, key, "%s", $(name));
                    zstr_free (&key);
                    i++;
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
.       elsif type = "hash"
            if (self->$(name)) {
                zconfig_t *hash = zconfig_new ("$(name)", config);
                char *item = (char *) zhash_first (self->$(name));
                while (item) {
                    zconfig_putf (hash, zhash_cursor (self->$(name)), "%s", item);
                    item = (char *) zhash_next (self->$(name));
                }
            }
.       elsif type = "chunk"
            {
            char *hex = NULL;
            STR_FROM_BYTES (hex, zchunk_data (self->$(name)), zchunk_size (self->$(name)));
            zconfig_putf (config, "$(name)", "%s", hex);
            zstr_free (&hex);
            }
.       elsif type = "uuid"
            if (self->$(name))
                zconfig_putf (config, "$(name)", "%s", zuuid_str (self->$(name)));
.       elsif type = "frame"
            {
            char *hex = NULL;
            STR_FROM_BYTES (hex, zframe_data (self->$(name)), zframe_size (self->$(name)));
            zconfig_putf (config, "$(name)", "%s", hex);
            zstr_free (&hex);
            }
.       elsif type = "msg"
            {
            char *hex = NULL;
            byte *buffer;
            size_t size = zmsg_encode (self->$(name), &buffer);
            STR_FROM_BYTES (hex, buffer, size);
            zconfig_putf (config, "$(name)", "%s", hex);
            zstr_free (&hex);
            free (buffer); buffer= NULL;
            }
.       endif
.   endfor
            break;
            }
.endfor
    }
    return root;
}


//  --------------------------------------------------------------------------
//  Get/set the message routing_id

zframe_t *
$(class.name)_routing_id ($(class.name)_t *self)
{
    assert (self);
    return self->routing_id;
}

void
$(class.name)_set_routing_id ($(class.name)_t *self, zframe_t *routing_id)
{
    if (self->routing_id)
        zframe_destroy (&self->routing_id);
    self->routing_id = zframe_dup (routing_id);
}


//  --------------------------------------------------------------------------
//  Get/set the $(class.name) id

int
$(class.name)_id ($(class.name)_t *self)
{
    assert (self);
    return self->id;
}

void
$(class.name)_set_id ($(class.name)_t *self, int id)
{
    self->id = id;
}

//  --------------------------------------------------------------------------
//  Return a printable command string

const char *
$(class.name)_command ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            return ("$(MESSAGE.NAME)");
            break;
.endfor
    }
    return "?";
}

.for class.field where !defined (value)
.   if type = "number"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

$(ctype)
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, $(ctype) $(name))
{
    assert (self);
    self->$(name) = $(name);
}

.   elsif type = "octets"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

byte *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, byte *$(name))
{
    assert (self);
    memcpy (self->$(name), $(name), $(size));
}

.   elsif type = "string" | type = "longstr"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

const char *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, const char *format, ...)
{
    //  Format $(name) from provided arguments
    assert (self);
    va_list argptr;
    va_start (argptr, format);
    free (self->$(name));
    self->$(name) = zsys_vprintf (format, argptr);
    va_end (argptr);
}

.   elsif type = "strings"
//  --------------------------------------------------------------------------
//  Get the $(name) field, without transferring ownership

zlist_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

zlist_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    assert (self);
    zlist_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, zlist_t **$(name)_p)
{
    assert (self);
    assert ($(name)_p);
    zlist_destroy (&self->$(name));
    self->$(name) = *$(name)_p;
    *$(name)_p = NULL;
}

//  --------------------------------------------------------------------------
//  Iterate through the $(name) field, and append a $(name) value

const char *
$(class.name)_$(name)_first ($(class.name)_t *self)
{
    assert (self);
    if (self->$(name))
        return (char *) (zlist_first (self->$(name)));
    else
        return NULL;
}

const char *
$(class.name)_$(name)_next ($(class.name)_t *self)
{
    assert (self);
    if (self->$(name))
        return (char *) (zlist_next (self->$(name)));
    else
        return NULL;
}

void
$(class.name)_$(name)_append ($(class.name)_t *self, const char *format, ...)
{
    //  Format into newly allocated string
    assert (self);
    va_list argptr;
    va_start (argptr, format);
    char *string = zsys_vprintf (format, argptr);
    va_end (argptr);

    //  Attach string to list
    if (!self->$(name)) {
        self->$(name) = zlist_new ();
        zlist_autofree (self->$(name));
    }
    zlist_append (self->$(name), string);
    free (string);
}

size_t
$(class.name)_$(name)_size ($(class.name)_t *self)
{
    return zlist_size (self->$(name));
}

.   elsif type = "hash"
//  --------------------------------------------------------------------------
//  Get the $(name) field without transferring ownership

zhash_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

zhash_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    zhash_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, zhash_t **$(name)_p)
{
    assert (self);
    assert ($(name)_p);
    zhash_destroy (&self->$(name));
    self->$(name) = *$(name)_p;
    *$(name)_p = NULL;
}

//  --------------------------------------------------------------------------
//  Get/set a value in the $(name) dictionary

const char *
$(class.name)_$(name)_string ($(class.name)_t *self, const char *key, const char *default_value)
{
    assert (self);
    const char *value = NULL;
    if (self->$(name))
        value = (const char *) (zhash_lookup (self->$(name), key));
    if (!value)
        value = default_value;

    return value;
}

uint64_t
$(class.name)_$(name)_number ($(class.name)_t *self, const char *key, uint64_t default_value)
{
    assert (self);
    uint64_t value = default_value;
    char *string = NULL;
    if (self->$(name))
        string = (char *) (zhash_lookup (self->$(name), key));
    if (string)
        value = atol (string);

    return value;
}

void
$(class.name)_$(name)_insert ($(class.name)_t *self, const char *key, const char *format, ...)
{
    //  Format into newly allocated string
    assert (self);
    va_list argptr;
    va_start (argptr, format);
    char *string = zsys_vprintf (format, argptr);
    va_end (argptr);

    //  Store string in hash table
    if (!self->$(name)) {
        self->$(name) = zhash_new ();
        zhash_autofree (self->$(name));
    }
    zhash_update (self->$(name), key, string);
    free (string);
}

size_t
$(class.name)_$(name)_size ($(class.name)_t *self)
{
    return zhash_size (self->$(name));
}

.   elsif type = "chunk" | type = "uuid" | type = "frame" | type = "msg"
//  --------------------------------------------------------------------------
//  Get the $(name) field without transferring ownership

z$(type)_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

z$(type)_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    z$(type)_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, z$(type)_t **$(type)_p)
{
    assert (self);
    assert ($(type)_p);
    z$(type)_destroy (&self->$(name));
    self->$(name) = *$(type)_p;
    *$(type)_p = NULL;
}

.   endif

.endfor

//  --------------------------------------------------------------------------
//  Selftest

void
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");

    //  Silence an "unused" warning by "using" the verbose variable
    if (verbose) {;}

    //  @selftest
    //  Simple create/destroy test
    $(class.name)_t *self = $(class.name)_new (0);
    assert (self);
    $(class.name)_destroy (&self);

    //  Create pair of sockets we can send through
    zsock_t *input = zsock_new (ZMQ_ROUTER);
    assert (input);
    zsock_connect (input, "inproc://selftest-$(class.name)");

    zsock_t *output = zsock_new (ZMQ_DEALER);
    assert (output);
    zsock_bind (output, "inproc://selftest-$(class.name)");

    //  Encode/send/decode and verify each message type
    int instance;
    $(class.name)_t *copy;
    zconfig_t *config;
.for class.message
    self = $(class.name)_new ($(CLASS.NAME)_$(MESSAGE.NAME));

    //  Check that _dup works on empty message
    copy = $(class.name)_dup (self);
    assert (copy);
    $(class.name)_destroy (&copy);

.   for field where !defined (value)
.       if type = "number"
    $(class.name)_set_$(name) (self, 123);
.       elsif type = "octets"
    byte $(name)_data [$(CLASS.NAME)_$(FIELD.NAME)_SIZE];
    memset ($(name)_data, 123, $(CLASS.NAME)_$(FIELD.NAME)_SIZE);
    $(class.name)_set_$(name) (self, $(name)_data);
.       elsif type = "string" | type = "longstr"
    $(class.name)_set_$(name) (self, "Life is short but Now lasts for ever");
.       elsif type = "strings"
    $(class.name)_$(name)_append (self, "Name: %s", "Brutus");
    $(class.name)_$(name)_append (self, "Age: %d", 43);
.       elsif type = "hash"
    $(class.name)_$(name)_insert (self, "Name", "Brutus");
    $(class.name)_$(name)_insert (self, "Age", "%d", 43);
.       elsif type = "chunk" | type = "frame"
    z$(type)_t *$(message.name)_$(name) = z$(type)_new ("Captcha Diem", 12);
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
.       elsif type = "uuid"
    zuuid_t *$(message.name)_$(name) = zuuid_new ();
    zuuid_t *$(message.name)_$(name)_dup = zuuid_dup ($(message.name)_$(name));
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
.       elsif type = "msg"
    zmsg_t *$(message.name)_$(name) = zmsg_new ();
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
    zmsg_addstr ($(class.name)_$(name) (self), "Hello, World");
.       endif
.   endfor
    // convert to zpl
    config = $(class.name)_zpl (self, NULL);
    if (verbose)
        zconfig_print (config);
    //  Send twice from same object
    $(class.name)_send_again (self, output);
    $(class.name)_send (&self, output);

    for (instance = 0; instance < 3; instance++) {
        if (instance < 2)
            self = $(class.name)_recv (input);
        else {
            self = $(class.name)_new_zpl (config);
            zconfig_destroy (&config);
        }
        assert (self);
        if (instance < 2)
            assert ($(class.name)_routing_id (self));

.   for field where !defined (value)
.       if type = "number"
        assert ($(class.name)_$(name) (self) == 123);
.       elsif type = "octets"
        assert ($(class.name)_$(name) (self) [0] == 123);
        assert ($(class.name)_$(name) (self) [$(CLASS.NAME)_$(FIELD.NAME)_SIZE - 1] == 123);
.       elsif type = "string" | type = "longstr"
        assert (streq ($(class.name)_$(name) (self), "Life is short but Now lasts for ever"));
.       elsif type = "strings"
        assert ($(class.name)_$(name)_size (self) == 2);
        assert (streq ($(class.name)_$(name)_first (self), "Name: Brutus"));
        assert (streq ($(class.name)_$(name)_next (self), "Age: 43"));
.       elsif type = "hash"
        assert ($(class.name)_$(name)_size (self) == 2);
        assert (streq ($(class.name)_$(name)_string (self, "Name", "?"), "Brutus"));
        assert ($(class.name)_$(name)_number (self, "Age", 0) == 43);
.       elsif type = "chunk"
        assert (memcmp (zchunk_data ($(class.name)_$(name) (self)), "Captcha Diem", 12) == 0);
.       elsif type = "uuid"
        zuuid_t *acutal_$(name) = $(class.name)_$(name) (self);
        assert (zuuid_eq ($(message.name)_$(name)_dup, zuuid_data (acutal_$(name))));
        if (instance == 1) {
            zuuid_destroy (&$(message.name)_$(name)_dup);
        }
.       elsif type = "frame"
        assert (zframe_streq ($(class.name)_$(name) (self), "Captcha Diem"));
.       elsif type = "msg"
        assert (zmsg_size ($(class.name)_$(name) (self)) == 1);
.       endif
.   endfor
        $(class.name)_destroy (&self);
    }
.endfor

    zconfig_destroy (&config);
    zsock_destroy (&input);
    zsock_destroy (&output);
    //  @end

    printf ("OK\\n");
}
